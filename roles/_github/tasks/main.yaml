---
- name: "{{ name }} | Download Latest Version JSON"
  ansible.builtin.uri:
    url: "https://api.github.com/repos/{{ repo }}/releases/latest"
  register: latest_version_json
  changed_when: false

- name: "{{ name }} | Registering {{ name }} Latest Release"
  ansible.builtin.set_fact:
    latest_release: "{{ latest_version_json.json.tag_name }}"

- name: "{{ name }} | Registering {{ name }} Latest Version"
  ansible.builtin.set_fact:
    latest_version: "{{ latest_release.stdout | default('') }}"

- name: "{{ name }} | Getting version information"
  ansible.builtin.shell:
    cmd: "{{ current_version_cmd }}"
  args:
    executable: /bin/bash
  register: current_version
  changed_when: false
  failed_when: false

- name: "{{ name }} | Show current_version debug"
  ansible.builtin.debug:
    var: current_version.stdout

- name: "{{ name }} | Show latest_release debug"
  ansible.builtin.debug:
    var: latest_release

- name: "{{ name }} | Ensure the package facts are set"
  ansible.builtin.set_fact:
    github_pkg_filename: "{{
      filename
        | replace('%VERSION%', latest_release)
        | replace('%NVERSION%', latest_release | regex_replace('^v', ''))
        | replace('%OS%', ansible_system | lower)
        | replace('%OSCAPITALIZED%', ansible_system)
        | replace('%ARCH%', ansible_architecture | replace('x86_64', 'amd64'))
        | replace('%ARCHRAW%', ansible_architecture)
      }}"
    github_extracted_name: "{{
      extracted_name | default('')
        | replace('%VERSION%', latest_release)
        | replace('%NVERSION%', latest_release | regex_replace('^v', ''))
        | replace('%OS%', ansible_system | lower)
        | replace('%OSCAPITALIZED%', ansible_system)
        | replace('%ARCH%', ansible_architecture | replace('x86_64', 'amd64'))
        | replace('%ARCHRAW%', ansible_architecture)
      }}"

- name: "{{ name }} | Install"
  when: latest_release not in current_version.stdout|default('')
  block:
    - name: "{{ name }} | Ensure clean download destination"
      ansible.builtin.file:
        path: "/tmp/{{ github_pkg_filename }}"
        state: absent
      become: true

    - name: "{{ name }} | Downloading Release"
      ansible.builtin.get_url:
        url: "https://github.com/{{ repo }}/releases/download/{{ latest_release }}/{{ github_pkg_filename }}"
        dest: /tmp/
        mode: "0644"
        force: true

    - name: "{{ name }} | Extract file"
      when: (github_pkg_filename.find('.tar') != -1) or (github_pkg_filename.find('.zip') != -1)
      ansible.builtin.unarchive:
        src: "/tmp/{{ github_pkg_filename }}"
        dest: /tmp
      notify: 
        - Cleanup {{ name }} compressed file

    - name: "{{ name }} | Remove any current installations"
      ansible.builtin.file:
        path: "{{ output }}"
        state: absent
      become: true

    - name: "{{ name }} | Install file"
      ansible.builtin.copy:
        remote_src: true
        src: "/tmp/{{ github_extracted_name }}"
        dest: "{{ output }}"
        owner: "{{ host_user }}"
        group: "{{ host_user }}"
        force: true
        mode: "0755"
      become: true
      notify:
        - Remove extracted {{ name }} directory
